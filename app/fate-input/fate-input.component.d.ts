import { ElementRef, ViewRef, ViewContainerRef, ComponentFactoryResolver, OnInit, OnChanges, AfterViewInit, OnDestroy, EventEmitter, Renderer2, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { Subscription } from 'rxjs';
import { FateControllerService } from '../fate-controller.service';
import { FateHtmlParserService } from '../fate-html-parser.service';
import { FateParserService } from '../fate-parser.service';
export declare class FateInputComponent implements ControlValueAccessor, OnChanges, OnInit, AfterViewInit, OnDestroy {
    protected el: ElementRef;
    protected controller: FateControllerService;
    protected htmlParser: FateHtmlParserService;
    protected parser: FateParserService;
    protected sanitizer: DomSanitizer;
    protected factoryResolver: ComponentFactoryResolver;
    private renderer;
    private document;
    uiId: string;
    row: number;
    customClass: string;
    placeholder: string;
    initialFocus: boolean;
    focus: EventEmitter<void>;
    blur: EventEmitter<void>;
    dropdownPostionTop: string;
    dropdownPostionLeft: string;
    inlineAction: any;
    content: SafeHtml;
    empty: boolean;
    viewContainerRef: ViewContainerRef;
    protected set editTargetElementRef(elementRef: ElementRef<HTMLElement>);
    protected dropdownComponent: ViewRef;
    protected dropdownInstance: any;
    protected editTarget: HTMLElement;
    protected isFocused: boolean;
    private _unlisteners;
    private set unlisteners(value);
    constructor(el: ElementRef, controller: FateControllerService, htmlParser: FateHtmlParserService, parser: FateParserService, sanitizer: DomSanitizer, factoryResolver: ComponentFactoryResolver, renderer: Renderer2, document: any);
    private unlisten;
    private reactToChanges;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    protected computeHeight(): void;
    protected checkEmpty(): void;
    protected getHeight(rowCount: number): string;
    protected uiSubscription: Subscription;
    protected subscribeToUi(uiId: string): void;
    protected selectionRange: Range;
    protected saveSelection(): void;
    protected restoreSelection(): void;
    protected selectionInEditableTarget(): boolean;
    protected detectStyle(): void;
    protected changed: ((value: string) => void)[];
    writeValue(value: string): void;
    registerOnChange(fn: (value: string) => void): void;
    registerOnTouched(fn: () => void): void;
    protected checkForDropdownContext(): void;
    protected initDropdown(actionComponent: any, position: any): void;
    protected updateDropdown(value: any): void;
    protected updateDropdownPosition(): void;
}
