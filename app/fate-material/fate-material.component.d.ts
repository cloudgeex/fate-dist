import { ElementRef, OnDestroy } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import { MatFormFieldControl } from '@angular/material/form-field';
import { FateControllerService } from '../fate-controller.service';
import { FateParserService } from '../fate-parser.service';
import { FateIconService } from '../fate-icon.service';
import { Subject } from 'rxjs';
export declare class FateMaterialComponent implements ControlValueAccessor, OnDestroy, MatFormFieldControl<string> {
    ngControl: NgControl;
    row: number;
    buttons: Array<string>;
    get value(): string;
    set value(value: string);
    passthrough: string;
    get placeholder(): string;
    set placeholder(placeholder: string);
    protected _placeholder: string;
    uiId: any;
    id: string;
    blur(): void;
    focus(): void;
    mousedown(event: any): void;
    mouseup(event: any): void;
    clickOngoing: boolean;
    uiVisible: boolean;
    get empty(): boolean;
    get shouldLabelFloat(): boolean;
    get required(): boolean;
    set required(req: boolean);
    protected _required: boolean;
    get disabled(): boolean;
    set disabled(dis: boolean);
    protected _disabled: boolean;
    errorState: boolean;
    controlType: string;
    describedBy: string;
    setDescribedByIds(ids: string[]): void;
    onContainerClick(event: MouseEvent): void;
    stateChanges: Subject<void>;
    focused: boolean;
    protected changed: ((value: string) => void)[];
    constructor(controller: FateControllerService, parser: FateParserService, icon: FateIconService, el: ElementRef, ngControl: NgControl);
    onChange(value: any): void;
    ngOnDestroy(): void;
    writeValue(value: string): void;
    registerOnChange(fn: (value: string) => void): void;
    registerOnTouched(fn: () => void): void;
}
